DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Categories;
DROP TABLE IF EXISTS Products;
DROP TABLE IF EXISTS Purchases;
DROP TABLE IF EXISTS Inventory;
DROP TABLE IF EXISTS Carts;
DROP TABLE IF EXISTS Rating;
DROP TABLE IF EXISTS ProductFeedback;
DROP TABLE IF EXISTS SellerFeedback;
DROP TABLE IF EXISTS BalanceHistory;

CREATE TABLE Users (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    isseller BOOLEAN NOT NULL,
    balance DECIMAL(12,2) NOT NULL DEFAULT 0.00 check ( balance >= 0.00 ),
            -- sanity check, user cannot have negative balance
    address VARCHAR(255)
);

CREATE TABLE Categories (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL 
);

CREATE TABLE Products (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- product id
    name VARCHAR(255) UNIQUE NOT NULL,
    category INT NOT NULL, -- category id
    description VARCHAR(300) NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    image VARCHAR(500) NOT NULL,
    available BOOLEAN DEFAULT TRUE,
    creator_id INT NOT NULL REFERENCES Users(id)
);

CREATE TABLE Purchases (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id), -- buyer id
    pid INT NOT NULL, -- get product, join with Invetory
    sid INT NOT NULL, -- get seller, join with Inventory
    time_purchased timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    quantity INT NOT NULL CHECK (quantity >= 0), -- quant ordered
    price DECIMAL(12,2) NOT NULL ,-- price sold/bought
    order_id BIGINT NOT NULL, -- generated using uid + timestamp(using time.time())
    order_status BOOLEAN DEFAULT FALSE,
    fulfill_date timestamp without time zone DEFAULT(current_timestamp AT TIME ZONE 'UTC')
);

CREATE TABLE Inventory(
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sid INT NOT NULL REFERENCES Users(id), -- seller id
    pid INT NOT NULL REFERENCES Products(id), -- product name, category
    quantity INT NOT NULL CHECK (quantity >= 0),
    price DECIMAL(12,2) NOT NULL check ( price >= 0.00 ), -- specific to seller, up-to-date
    release_date timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC')
);

CREATE TABLE Carts(
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id), -- buyer id
    iid INT NOT NULL REFERENCES Inventory(id), -- use to get price, quantity, seller
    time_added timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    quantity INT NOT NULL CHECK (quantity >= 0), -- buyer's quantity
    save_for_later BOOLEAN NOT NULL DEFAULT FALSE -- FALSE means in cart, otherwise not in cart
);

CREATE TABLE ProductFeedback(
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id), -- reviewer id
    pid INT NOT NULL REFERENCES Products(id), -- use to getproduct name, category
    rating INT NOT NULL,
    review TEXT,
    time_feedback timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'), 
                -- time of feedback submitted
    upvotes INT NOT NULL DEFAULT (0)
);

CREATE TABLE SellerFeedback(
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id), -- reviewer id
    sid INT NOT NULL REFERENCES Users(id), -- seller id
    rating INT NOT NULL,
    review TEXT,
    time_feedback timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'), 
                -- time of feedback submitted
    upvotes INT NOT NULL DEFAULT (0)
);

CREATE TABLE BalanceHistory(
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    start DECIMAL(12,2) NOT NULL, -- starting balance
    amount DECIMAL(12,2) NOT NULL, -- amount of balance change
    pid INT, -- purchase id (copied)
    uid INT NOT NULL REFERENCES Users(id), -- user id
    category INT NOT NULL, -- 1: buy, 2: sell, 3: deposite, 4: withdraw
    time_changed timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC')
);
